/*

This is the Random Forest image classification module, which is part 
of the BVC GEM v1.2 library. It is used to classify the composite
imagery for the area of interest.

Last update: July 22, 2024


use_cont_spec, Chot, Clot, t_poly_h, t_poly_c,
*/


exports.doc = 'The Random Forest Classification module is used'+
    '\nto classify the GEEMMM composite images for the identified ROI.' +
    '\nThe output is a single band image containing the pre-determined' +
    '\nland cover classes from the training data. This module includes' +
    '\nsix unique functions.'+
    '\n' +
    '\n ChotClassify(Chot, t_poly, label, bands, ROI, trees):' +
    '\n   @param {ee.Image} Chot: contemporary high-tide composite' +
    '\n   @param {ee.FeatureCollection} t_poly: the CRAs data' +
    '\n   @param {text} label: column name for the numeric land cover class in the training data' +
    '\n   @param {ee.List} bands: list of bands to use in the classification'+ 
    '\n   @param {ee.Geometry} ROI: region of interest' +
    '\n   @param {numeric} trees: Random Forest parameter, number of trees to use in classification' +
    '\n   @return {ee.Image} Single band raster image' +
    '\n' +
    '\n ClotClassify(Clot, t_poly, label, bands, ROI, trees):' +
    '\n   @param {ee.Image} Clot: contemporary low-tide composite' +
    '\n   @param {ee.FeatureCollection} t_poly: the CRAs data' +
    '\n   @param {text} label: column name for the numeric land cover class in the training data' +
    '\n   @param {ee.List} bands: list of bands to use in the classification'+ 
    '\n   @param {ee.Geometry} ROI: region of interest' +
    '\n   @param {numeric} trees: Random Forest parameter, number of trees to use in classification' +
    '\n   @return {ee.Image} Single band raster image' +
    '\n' +
    '\n CcomClassify(Chot, Clot, t_poly, label, bands, ROI, trees):' +
    '\n   @param {ee.Image} Chot: contemporary high-tide composite' +    
    '\n   @param {ee.Image} Clot: contemporary low-tide composite' +
    '\n   @param {ee.FeatureCollection} t_poly: the CRAs data' +
    '\n   @param {text} label: column name for the numeric land cover class in the training data' +
    '\n   @param {ee.List} bands: list of bands to use in the classification'+ 
    '\n   @param {ee.Geometry} ROI: region of interest' +
    '\n   @param {numeric} trees: Random Forest parameter, number of trees to use in classification' +
    '\n   @return {ee.Image} Single band raster image' +
    '\n'+
    '\n HhotClassify(Hhot, class_ref_type, use_cont_spec, Chot, t_poly_h, t_poly_c, label, bands, ROI, trees):' +
    '\n   @param {ee.Image} Hhot: historic high-tide composite' +
    '\n   @param {boolean} class_ref_type: type of classification reference data being used' +
    '\n   @param {boolean} use_cont_spec: will the contemporary spectral values be applied' +
    '\n   @param {ee.Image} Chot: contemporary high-tide composite' +
    '\n   @param {ee.FeatureCollection} t_poly_h: the historic CRAs data' +
    '\n   @param {ee.FeatureCollection} t_poly_c: the contemporary CRAs data' +
    '\n   @param {text} label: column name for the numeric land cover class in the training data' +
    '\n   @param {ee.List} bands: list of bands to use in the classification'+ 
    '\n   @param {ee.Geometry} ROI: region of interest' +
    '\n   @param {numeric} trees: Random Forest parameter, number of trees to use in classification' +
    '\n   @return {ee.Image} Single band raster image' +
    '\n'+
    '\n HlotClassify(Hlot, class_ref_type, use_cont_spec, Clot, t_poly_h, t_poly_c, label, bands, ROI, trees):' +
    '\n   @param {ee.Image} Hlot: historic low-tide composite' +
    '\n   @param {boolean} class_ref_type: type of classification reference data being used' +
    '\n   @param {boolean} use_cont_spec: will the contemporary spectral values be applied' +    
    '\n   @param {ee.Image} Clot: contemporary low-tide composite' +
    '\n   @param {ee.FeatureCollection} t_poly_h: the historic CRAs data' +
    '\n   @param {ee.FeatureCollection} t_poly_c: the contemporary CRAs data' +
    '\n   @param {text} label: column name for the numeric land cover class in the training data' +
    '\n   @param {ee.List} bands: list of bands to use in the classification'+ 
    '\n   @param {ee.Geometry} ROI: region of interest' +
    '\n   @param {numeric} trees: Random Forest parameter, number of trees to use in classification' +
    '\n   @return {ee.Image} Single band raster image' +
    '\n'+
    '\n HcomClassify(Hhot, Hlot, class_ref_type, use_cont_spec, Chot, Clot, t_poly_h, t_poly_c, label, bands, ROI, trees):' +
    '\n   @param {ee.Image} Hhot: historic high-tide composite' +
    '\n   @param {ee.Image} Hlot: historic low-tide composite' +
    '\n   @param {boolean} class_ref_type: type of classification reference data being used' +
    '\n   @param {boolean} use_cont_spec: will the contemporary spectral values be applied' +    
    '\n   @param {ee.Image} Chot: contemporary high-tide composite' +
    '\n   @param {ee.Image} Clot: contemporary low-tide composite' +
    '\n   @param {ee.FeatureCollection} t_poly_h: the historic CRAs data' +
    '\n   @param {ee.FeatureCollection} t_poly_c: the contemporary CRAs data' +
    '\n   @param {text} label: column name for the numeric land cover class in the training data' +
    '\n   @param {ee.List} bands: list of bands to use in the classification'+ 
    '\n   @param {ee.Geometry} ROI: region of interest' +
    '\n   @param {numeric} trees: Random Forest parameter, number of trees to use in classification' +
    '\n   @return {ee.Image} Single band raster image';

// Contemporary High-tide Classification  
exports.ChotClassify = function(Chot, t_poly, label, bands, ROI, trees, splits, leafpop, bag, nodes, seeds, colors){
  
  // Overlay the points on the imagery to get training for HOT
   var sample_CHOT = Chot.select(bands).sampleRegions({
              collection: t_poly,
              properties: [label],
              scale: 30, 
              tileScale: 16
            });

  //add random column to training data
  sample_CHOT = sample_CHOT.randomColumn({ seed: 1 });
  // select 70% to train
  var CHOT_training = sample_CHOT.filter(ee.Filter.lt('random', 0.7));
  // reserve 30% to validate
  var CHOT_validation = sample_CHOT.filter(ee.Filter.gte('random', 0.7));

  // Train a RF classifier for the HOT image
  var CHOT_trained_classifier = ee.Classifier.smileRandomForest(
                                    {numberOfTrees: trees,
                                    variablesPerSplit: splits,
                                    minLeafPopulation: leafpop,
                                    bagFraction: bag,
                                    maxNodes: nodes,
                                    seed: seeds
                                    })
                                    .train({
                                          features: CHOT_training,
                                          classProperty: label,
                                          inputProperties: bands
                                          });
  

  // Classify the HOT image.
  var classified_CHOT = Chot.classify(CHOT_trained_classifier);
            
  Export.image.toAsset({
              image: classified_CHOT.clip(ROI),
              description: 'HOT_Classification_contemporary',
              assetId: 'HOT_Classification_contemporary',
              region: ROI,
              scale: 30,
              maxPixels:1e13
              });
              
  classified_CHOT.evaluate(function(){
              
              var min_no = t_poly.reduceColumns({
                                 reducer: ee.Reducer.min(),
                                 selectors: [label]}).get('min');
              var max_no = t_poly.reduceColumns({
                                 reducer: ee.Reducer.max(),
                                 selectors: [label]}).get('max');
              
              
              Map.addLayer(classified_CHOT.clip(ROI), {min:min_no.getInfo(), max:max_no.getInfo(),
                          palette: colors.getInfo()}, 'HOT_Classification_contemporary');
              
              // Get a confusion matrix resubstitution accuracy.
              var CHOT_trainAccuracy = CHOT_trained_classifier.confusionMatrix();
              
              print('CHOT resubstitution error matrix: ', CHOT_trainAccuracy);
              print('CHOT Training overall accuracy: ', CHOT_trainAccuracy.accuracy());

              // Classify the validation data.
              var validated_CHOT = CHOT_validation.classify(CHOT_trained_classifier);
              
              // Get a confusion matrix representing expected accuracy.
              var CHOT_testAccuracy = validated_CHOT.errorMatrix(label, 'classification');
              print('CHOT Validation error matrix: ', CHOT_testAccuracy);
              print('CHOT Validation overall accuracy: ', CHOT_testAccuracy.accuracy());
  });

  return classified_CHOT;
};

// Contemporary Low-tide Classification
exports.ClotClassify = function(Clot, t_poly, label, bands, ROI, trees, splits, leafpop, bag, nodes, seeds, colors){

  // Overlay the points on the imagery to get training for LOT
  var sample_CLOT = Clot.select(bands).sampleRegions({
              collection: t_poly,
              properties: [label],
              scale: 30, 
              tileScale: 16
            });

  sample_CLOT = sample_CLOT.randomColumn({ seed: 1 });
  var CLOT_training = sample_CLOT.filter(ee.Filter.lt('random', 0.7));
  var CLOT_validation = sample_CLOT.filter(ee.Filter.gte('random', 0.7));
          
  // Train a RF classifier for the LOT image
  var CLOT_trained_classifier = ee.Classifier.smileRandomForest(
                                    {numberOfTrees: trees,
                                    variablesPerSplit: splits,
                                    minLeafPopulation: leafpop,
                                    bagFraction: bag,
                                    maxNodes: nodes,
                                    seed: seeds
                                    })
                              .train({
                                  features: CLOT_training,
                                  classProperty: label,
                                  inputProperties: bands
                                  });

  // Classify the LOT image.
  var classified_CLOT = Clot.classify(CLOT_trained_classifier);
  
  Export.image.toAsset({
              image: classified_CLOT.clip(ROI),
              description: 'LOT_Classification_contemporary',
              assetId: 'LOT_Classification_contemporary',
              region: ROI,
              scale: 30,
              maxPixels:1e13
              });
              
  classified_CLOT.evaluate(function(){
    
              var min_no = t_poly.reduceColumns({
                                 reducer: ee.Reducer.min(),
                                 selectors: [label]}).get('min');
              var max_no = t_poly.reduceColumns({
                                 reducer: ee.Reducer.max(),
                                 selectors: [label]}).get('max');
              
              
              Map.addLayer(classified_CLOT.clip(ROI), {min:min_no.getInfo(), max:max_no.getInfo(),
                          palette: colors.getInfo()}, 'LOT_Classification_contemporary');
              
              // Get a confusion matrix resubstitution accuracy.
              var CLOT_trainAccuracy = CLOT_trained_classifier.confusionMatrix();
              print('LOT Cont. resubstitution error matrix: ', CLOT_trainAccuracy);
              print('LOT Cont. Training overall accuracy: ', CLOT_trainAccuracy.accuracy());
              
              // Classify the validation data.
              var validated_CLOT = CLOT_validation.classify(CLOT_trained_classifier);
              
              // Get a confusion matrix representing expected accuracy.
              var CLOT_testAccuracy = validated_CLOT.errorMatrix(label, 'classification');
              print('LOT Cont. Validation error matrix: ', CLOT_testAccuracy);
              print('LOT Cont. Validation overall accuracy: ', CLOT_testAccuracy.accuracy());
  });
  
  return classified_CLOT;
};


// Contemporary Combine Classification
exports.CcomClassify = function(Chot, Clot, t_poly, label, bands, ROI, trees, splits, leafpop, bag, nodes, seeds, colors){

  Chot = Chot.select(bands);
  Clot = Clot.select(bands);
  var Ccom = Chot.addBands(Clot);
  bands = Ccom.bandNames();
  // Overlay the points on the imagery to get training for LOT
  var sample_Ccom = Ccom.select(bands).sampleRegions({
              collection: t_poly,
              properties: [label],
              scale: 30, 
              tileScale: 16
            });

  sample_Ccom = sample_Ccom.randomColumn({ seed: 1 });
  var CCOM_training = sample_Ccom.filter(ee.Filter.lt('random', 0.7));
  var CCOM_validation = sample_Ccom.filter(ee.Filter.gte('random', 0.7));
          
  // Train a RF classifier for the LOT image
  var CCOM_trained_classifier = ee.Classifier.smileRandomForest(
                                    {numberOfTrees: trees,
                                    variablesPerSplit: splits,
                                    minLeafPopulation: leafpop,
                                    bagFraction: bag,
                                    maxNodes: nodes,
                                    seed: seeds
                                    })
                              .train({
                                  features: CCOM_training,
                                  classProperty: label,
                                  inputProperties: bands
                                  });

  // Classify the LOT image.
  var classified_CCOM = Ccom.classify(CCOM_trained_classifier);
  var exportFunc = function() {
    Export.image.toAsset({
            image: classified_CCOM.clip(ROI),
            description: 'Combine_Classification_contemporary',
            assetId: 'Combine_Classification_contemporary',
            region: ROI,
            scale: 30,
            maxPixels:1e13
    });
  };
  exportFunc();
              
  classified_CCOM.evaluate(function(){
              
              var min_no = t_poly.reduceColumns({
                                 reducer: ee.Reducer.min(),
                                 selectors: [label]}).get('min');
              var max_no = t_poly.reduceColumns({
                                 reducer: ee.Reducer.max(),
                                 selectors: [label]}).get('max');
              
              Map.addLayer(classified_CCOM.clip(ROI), {min:min_no.getInfo(), max:max_no.getInfo(),
                          palette: colors.getInfo()}, 'Combine_Classification_contemporary');
    
              // Get a confusion matrix resubstitution accuracy.
              var CCOM_trainAccuracy = CCOM_trained_classifier.confusionMatrix();
              print('Combine Cont. resubstitution error matrix: ', CCOM_trainAccuracy);
              print('Combine Cont. Training overall accuracy: ', CCOM_trainAccuracy.accuracy());
              
              // Classify the validation data.
              var validated_CCOM = CCOM_validation.classify(CCOM_trained_classifier);
              
              // Get a confusion matrix representing expected accuracy.
              var CCOM_testAccuracy = validated_CCOM.errorMatrix(label, 'classification');
              print('Combine Cont. Validation error matrix: ', CCOM_testAccuracy);
              print('Combine Cont. Validation overall accuracy: ', CCOM_testAccuracy.accuracy());
              var button = ui.Button({
                label: 'Export Contemporary Classified Imagery',
                onClick: exportFunc,
              });
              print(button);
  });  
            
  return classified_CCOM;
  
};

// Historic High-tide Classification 
exports.HhotClassify = function(Hhot, class_ref_type, use_cont_spec, Chot, t_poly_h, t_poly_c, label, bands, ROI, 
                                trees, splits, leafpop, bag, nodes, seeds, colors){

  // CRA Type?
  if(class_ref_type === true){ var t_poly = t_poly_c;}else{var t_poly = t_poly_h;}
  
  
  // Training functions
  
  var cont_spec = function(){
    // Overlay the points on the imagery to get training for HOT
    var sample_HHOT = Chot.select(bands).sampleRegions({
                collection: t_poly,
                properties: [label],
                scale: 30, 
                tileScale: 16
              });
    return sample_HHOT;
    }; 

  var hist_spec = function(){    
    // Overlay the points on the imagery to get training for HOT
    var sample_HHOT = Hhot.select(bands).sampleRegions({
                collection: t_poly,
                properties: [label],
                scale: 30, 
                tileScale: 16
              });
    return sample_HHOT;
    }; 

  // If there is no historic data?
  if(use_cont_spec === true){ var sample_HHOT = cont_spec();}else{var sample_HHOT = hist_spec();}
  
  //add random column to training data
  sample_HHOT = sample_HHOT.randomColumn({ seed: 1 });
  // select 70% to train
  var HHOT_training = sample_HHOT.filter(ee.Filter.lt('random', 0.7));
  // reserve 30% to validate
  var HHOT_validation = sample_HHOT.filter(ee.Filter.gte('random', 0.7));

  // Train a RF classifier for the HOT image
  var HHOT_trained_classifier = ee.Classifier.smileRandomForest(
                                    {numberOfTrees: trees,
                                    variablesPerSplit: splits,
                                    minLeafPopulation: leafpop,
                                    bagFraction: bag,
                                    maxNodes: nodes,
                                    seed: seeds
                                    })
                              .train({
                                  features: HHOT_training,
                                  classProperty: label,
                                  inputProperties: bands
                                  });
  

  // Classify the HOT image.
  var classified_HHOT = Hhot.classify(HHOT_trained_classifier);

  Export.image.toAsset({
              image: classified_HHOT.clip(ROI),
              description: 'HOT_Classification_historic',
              assetId: 'HOT_Classification_historic',
              region: ROI,
              scale: 30,
              maxPixels:1e13
              });  
                
  classified_HHOT.evaluate(function(){
    
              var min_no = t_poly.reduceColumns({
                                 reducer: ee.Reducer.min(),
                                 selectors: [label]}).get('min');
              var max_no = t_poly.reduceColumns({
                                 reducer: ee.Reducer.max(),
                                 selectors: [label]}).get('max');
              
              Map.addLayer(classified_HHOT.clip(ROI), {min:min_no.getInfo(), max:max_no.getInfo(),
                          palette: colors.getInfo()}, 'HOT_Classification_Historic');
    
              // Get a confusion matrix resubstitution accuracy.
              var HHOT_trainAccuracy = HHOT_trained_classifier.confusionMatrix();
              print('HOT Hist. resubstitution error matrix: ', HHOT_trainAccuracy);
              print('HOT Hist.Training overall accuracy: ', HHOT_trainAccuracy.accuracy());
              
              // Classify the validation data.
              var validated_HHOT = HHOT_validation.classify(HHOT_trained_classifier);
              
              // Get a confusion matrix representing expected accuracy.
              var HHOT_testAccuracy = validated_HHOT.errorMatrix(label, 'classification');
              print('HOT Hist. Validation error matrix: ', HHOT_testAccuracy);
              print('HOT Hist. Validation overall accuracy: ', HHOT_testAccuracy.accuracy());
  });
  
  
  return classified_HHOT;

};

// Historic Low-tide Classification
exports.HlotClassify = function(Hlot, class_ref_type, use_cont_spec, Clot, t_poly_h, t_poly_c, label, bands, ROI, 
                                trees, splits, leafpop, bag, nodes, seeds, colors){

  // CRA Type?
  if(class_ref_type === true){ var t_poly = t_poly_c;}else{var t_poly = t_poly_h;}

  
  var cont_spec = function(){
    // Overlay the points on the imagery to get training for HOT
    var sample_HLOT = Clot.select(bands).sampleRegions({
                collection: t_poly,
                properties: [label],
                scale: 30, 
                tileScale: 16
              });
    return sample_HLOT;
    }; 

  var hist_spec = function(){    
    // Overlay the points on the imagery to get training for HOT
    var sample_HLOT = Hlot.select(bands).sampleRegions({
                collection: t_poly,
                properties: [label],
                scale: 30, 
                tileScale: 16
              });
    return sample_HLOT;
    }; 
    
  // If there is no historic data?
  if(use_cont_spec === true){ var sample_HLOT = cont_spec();}else{var sample_HLOT = hist_spec();}
  
  //add random column to training data
  sample_HLOT = sample_HLOT.randomColumn({ seed: 1 });
  // select 70% to train
  var HLOT_training = sample_HLOT.filter(ee.Filter.lt('random', 0.7));
  // reserve 30% to validate
  var HLOT_validation = sample_HLOT.filter(ee.Filter.gte('random', 0.7));

  // Train a RF classifier for the HOT image
  var HLOT_trained_classifier = ee.Classifier.smileRandomForest(
                                    {numberOfTrees: trees,
                                    variablesPerSplit: splits,
                                    minLeafPopulation: leafpop,
                                    bagFraction: bag,
                                    maxNodes: nodes,
                                    seed: seeds
                                    })
                              .train({
                                  features: HLOT_training,
                                  classProperty: label,
                                  inputProperties: bands
                                  });
  

  // Classify the HOT image.
  var classified_HLOT = Hlot.classify(HLOT_trained_classifier);
            
  Export.image.toAsset({
              image: classified_HLOT.clip(ROI),
              description: 'LOT_Classification_Historic',
              assetId: 'LOT_Classification_Historic',
              region: ROI,
              scale: 30,
              maxPixels:1e13
              });  
              
  classified_HLOT.evaluate(function(){
              
              var min_no = t_poly.reduceColumns({
                                 reducer: ee.Reducer.min(),
                                 selectors: [label]}).get('min');
              var max_no = t_poly.reduceColumns({
                                 reducer: ee.Reducer.max(),
                                 selectors: [label]}).get('max');
              
              Map.addLayer(classified_HLOT.clip(ROI), {min:min_no.getInfo(), max:max_no.getInfo(),
                          palette: colors.getInfo()}, 'LOT_Classification_Historic');
    
              // Get a confusion matrix resubstitution accuracy.
              var HLOT_trainAccuracy = HLOT_trained_classifier.confusionMatrix();
              print('LOT Hist. resubstitution error matrix: ', HLOT_trainAccuracy);
              print('LOT Hist. Training overall accuracy: ', HLOT_trainAccuracy.accuracy());
              
              // Classify the validation data.
              var validated_HLOT = HLOT_validation.classify(HLOT_trained_classifier);
              
              // Get a confusion matrix representing expected accuracy.
              var HLOT_testAccuracy = validated_HLOT.errorMatrix(label, 'classification');
              print('LOT Hist. Validation error matrix: ', HLOT_testAccuracy);
              print('LOT Hist. Validation overall accuracy: ', HLOT_testAccuracy.accuracy());
  });
  
  
  return classified_HLOT;
 
};

// Historic Combined Classification
exports.HcomClassify = function(Hhot, Hlot, class_ref_type, use_cont_spec, Chot, Clot, t_poly_h, t_poly_c, 
                                label, bands, ROI, trees, splits, leafpop, bag, nodes, seeds, colors){

  // CRA Type?
  if(class_ref_type === true){ var t_poly = t_poly_c;}else{var t_poly = t_poly_h;}

  //Organize imagery
  Hhot = Hhot.select(bands);
  Hlot = Hlot.select(bands);  
  Chot = Chot.select(bands);
  Clot = Clot.select(bands); 
   
  var Hcom = Hhot.addBands(Hlot);
  var Ccom = Chot.addBands(Clot);
  bands = Ccom.bandNames();
  
  var cont_spec = function(){
  // Overlay the points on the imagery to get training for HOT
  var sample_HCOM = Ccom.select(bands).sampleRegions({
                collection: t_poly,
                properties: [label],
                scale: 30, 
                tileScale: 16
              });
    return sample_HCOM;
    }; 

  var hist_spec = function(){
    // Overlay the points on the imagery to get training for HOT
    var sample_HCOM = Hcom.select(bands).sampleRegions({
                collection: t_poly,
                properties: [label],
                scale: 30, 
                tileScale: 16
              });
    return sample_HCOM;
    }; 

  // If there is no historic data?
  if(use_cont_spec === true){ var sample_HCOM = cont_spec();}else{var sample_HCOM = hist_spec();}
  
  // Add random column to training data
  sample_HCOM = sample_HCOM.randomColumn({ seed: 1 });
  // Select 70% to train
  var HCOM_training = sample_HCOM.filter(ee.Filter.lt('random', 0.7));
  // Reserve 30% to validate
  var HCOM_validation = sample_HCOM.filter(ee.Filter.gte('random', 0.7));

  // Train a RF classifier for the HOT image
  var HCOM_trained_classifier = ee.Classifier.smileRandomForest(
                                    {numberOfTrees: trees,
                                    variablesPerSplit: splits,
                                    minLeafPopulation: leafpop,
                                    bagFraction: bag,
                                    maxNodes: nodes,
                                    seed: seeds
                                    })
                              .train({
                                  features: HCOM_training,
                                  classProperty: label,
                                  inputProperties: bands
                                  });

  // Classify the HOT image.
  var classified_HCOM = Hcom.classify(HCOM_trained_classifier);
  
  var exportFunc = function() {
    Export.image.toAsset({
            image: classified_HCOM.clip(ROI),
            description: 'Combine_Classification_historic',
            assetId: 'Combine_Classification_historic',
            region: ROI,
            scale: 30,
            maxPixels:1e13
    });
  };
  exportFunc();
              
  classified_HCOM.evaluate(function(){
    
              var min_no = t_poly.reduceColumns({
                                 reducer: ee.Reducer.min(),
                                 selectors: [label]}).get('min');
              var max_no = t_poly.reduceColumns({
                                 reducer: ee.Reducer.max(),
                                 selectors: [label]}).get('max');
              
             Map.addLayer(classified_HCOM.clip(ROI), {min:min_no.getInfo(), max:max_no.getInfo(),
                          palette: colors.getInfo()}, 'Combine_Classification_Historic');
            
              // Get a confusion matrix resubstitution accuracy.
              var HCOM_trainAccuracy = HCOM_trained_classifier.confusionMatrix();
              print('Combine Hist. resubstitution error matrix: ', HCOM_trainAccuracy);
              print('Combine Hist. Training overall accuracy: ', HCOM_trainAccuracy.accuracy());
              
              // Classify the validation data.
              var validated_HCOM = HCOM_validation.classify(HCOM_trained_classifier);
              
              // Get a confusion matrix representing expected accuracy.
              var HCOM_testAccuracy = validated_HCOM.errorMatrix(label, 'classification');
              print('Combine Hist. Validation error matrix: ', HCOM_testAccuracy);
              print('Combine Hist. Validation overall accuracy: ', HCOM_testAccuracy.accuracy());
              
              var button = ui.Button({
                label: 'Export Historical Classified Imagery',
                onClick: exportFunc,
              });
              print(button);
  });  
  return classified_HCOM;
 
};
