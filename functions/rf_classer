
s is the Random Forest image classification module, which is part 
of the BVC GEM v1.2 library. It is used to classify the composite
imagery for the area of interest.

Last update: 21 August 2024

TODO: export buttons
*/


exports.doc = 'The Random Forest Classification module is used'+
    '\nto classify the GEEMMM composite images for the identified ROI.' +
    '\nThe output is a single band image containing the pre-determined' +
    '\nland cover classes from the training data. This module includes' +
    '\nsix unique functions.'+
    '\n' +
    '\n ChotClassify(Chot, t_poly, label, bands, ROI, trees):' +
    '\n   @param {ee.Image} Chot: contemporary high-tide composite' +
    '\n   @param {ee.FeatureCollection} t_poly: the CRAs data' +
    '\n   @param {text} label: column name for the numeric land cover class in the training data' +
    '\n   @param {ee.List} bands: list of bands to use in the classification'+ 
    '\n   @param {ee.Geometry} ROI: region of interest' +
    '\n   @param {numeric} trees: Random Forest parameter, number of trees to use in classification' +
    '\n   @return {ee.Image} Single band raster image' +
    '\n' +
    '\n ClotClassify(Clot, t_poly, label, bands, ROI, trees):' +
    '\n   @param {ee.Image} Clot: contemporary low-tide composite' +
    '\n   @param {ee.FeatureCollection} t_poly: the CRAs data' +
    '\n   @param {text} label: column name for the numeric land cover class in the training data' +
    '\n   @param {ee.List} bands: list of bands to use in the classification'+ 
    '\n   @param {ee.Geometry} ROI: region of interest' +
    '\n   @param {numeric} trees: Random Forest parameter, number of trees to use in classification' +
    '\n   @return {ee.Image} Single band raster image' +
    '\n' +
    '\n CcomClassify(Chot, Clot, t_poly, label, bands, ROI, trees):' +
    '\n   @param {ee.Image} Chot: contemporary high-tide composite' +    
    '\n   @param {ee.Image} Clot: contemporary low-tide composite' +
    '\n   @param {ee.FeatureCollection} t_poly: the CRAs data' +
    '\n   @param {text} label: column name for the numeric land cover class in the training data' +
    '\n   @param {ee.List} bands: list of bands to use in the classification'+ 
    '\n   @param {ee.Geometry} ROI: region of interest' +
    '\n   @param {numeric} trees: Random Forest parameter, number of trees to use in classification' +
    '\n   @return {ee.Image} Single band raster image' +
    '\n'+
    '\n HhotClassify(Hhot, class_ref_type, use_cont_spec, Chot, t_poly_h, t_poly_c, label, bands, ROI, trees):' +
    '\n   @param {ee.Image} Hhot: historic high-tide composite' +
    '\n   @param {boolean} class_ref_type: type of classification reference data being used' +
    '\n   @param {boolean} use_cont_spec: will the contemporary spectral values be applied' +
    '\n   @param {ee.Image} Chot: contemporary high-tide composite' +
    '\n   @param {ee.FeatureCollection} t_poly_h: the historic CRAs data' +
    '\n   @param {ee.FeatureCollection} t_poly_c: the contemporary CRAs data' +
    '\n   @param {text} label: column name for the numeric land cover class in the training data' +
    '\n   @param {ee.List} bands: list of bands to use in the classification'+ 
    '\n   @param {ee.Geometry} ROI: region of interest' +
    '\n   @param {numeric} trees: Random Forest parameter, number of trees to use in classification' +
    '\n   @return {ee.Image} Single band raster image' +
    '\n'+
    '\n HlotClassify(Hlot, class_ref_type, use_cont_spec, Clot, t_poly_h, t_poly_c, label, bands, ROI, trees):' +
    '\n   @param {ee.Image} Hlot: historic low-tide composite' +
    '\n   @param {boolean} class_ref_type: type of classification reference data being used' +
    '\n   @param {boolean} use_cont_spec: will the contemporary spectral values be applied' +    
    '\n   @param {ee.Image} Clot: contemporary low-tide composite' +
    '\n   @param {ee.FeatureCollection} t_poly_h: the historic CRAs data' +
    '\n   @param {ee.FeatureCollection} t_poly_c: the contemporary CRAs data' +
    '\n   @param {text} label: column name for the numeric land cover class in the training data' +
    '\n   @param {ee.List} bands: list of bands to use in the classification'+ 
    '\n   @param {ee.Geometry} ROI: region of interest' +
    '\n   @param {numeric} trees: Random Forest parameter, number of trees to use in classification' +
    '\n   @return {ee.Image} Single band raster image' +
    '\n'+
    '\n HcomClassify(Hhot, Hlot, class_ref_type, use_cont_spec, Chot, Clot, t_poly_h, t_poly_c, label, bands, ROI, trees):' +
    '\n   @param {ee.Image} Hhot: historic high-tide composite' +
    '\n   @param {ee.Image} Hlot: historic low-tide composite' +
    '\n   @param {boolean} class_ref_type: type of classification reference data being used' +
    '\n   @param {boolean} use_cont_spec: will the contemporary spectral values be applied' +    
    '\n   @param {ee.Image} Chot: contemporary high-tide composite' +
    '\n   @param {ee.Image} Clot: contemporary low-tide composite' +
    '\n   @param {ee.FeatureCollection} t_poly_h: the historic CRAs data' +
    '\n   @param {ee.FeatureCollection} t_poly_c: the contemporary CRAs data' +
    '\n   @param {text} label: column name for the numeric land cover class in the training data' +
    '\n   @param {ee.List} bands: list of bands to use in the classification'+ 
    '\n   @param {ee.Geometry} ROI: region of interest' +
    '\n   @param {numeric} trees: Random Forest parameter, number of trees to use in classification' +
    '\n   @return {ee.Image} Single band raster image';

// Contemporary High-tide Classification  
exports.ChotClassify = function(Chot, t_poly, label, bands, ROI, trees, splits, leafpop, bag, nodes, seeds, colors) {
  classify('HOT_Classification_Contemporary', Chot, t_poly, label, bands, ROI, trees, splits, leafpop, bag, nodes, seeds, colors);
};

// Contemporary Low-tide Classification
exports.ClotClassify = function(Clot, t_poly, label, bands, ROI, trees, splits, leafpop, bag, nodes, seeds, colors) {
  classify('LOT_Classification_Contemporary', Clot, t_poly, label, bands, ROI, trees, splits, leafpop, bag, nodes, seeds, colors);
};

// Contemporary Combine Classification
exports.CcomClassify = function(Chot, Clot, t_poly, label, bands, ROI, trees, splits, leafpop, bag, nodes, seeds, colors){
  Chot = Chot.select(bands);
  Clot = Clot.select(bands);
  var Ccom = Chot.addBands(Clot);
  bands = Ccom.bandNames();
  classify('Combined_Classification_Contemporary', Ccom, t_poly, label, bands, ROI, trees, splits, leafpop, bag, nodes, seeds, colors);
};

function classify(name, img, t_poly, label, bands, ROI, trees, splits, leafpop, bag, nodes, seeds, colors) {
  var props = [label];
  var scale = img.projection().nominalScale();
  // Overlay the points on the imagery to get training for HOT
  var sample = exports.sample_image(img.select(bands), t_poly, props, scale);

  //add random column to training data
  sample = sample.randomColumn({ seed: 1 });
  // select 70% to train
  var training = sample.filter(ee.Filter.lt('random', 0.7));
  // reserve 30% to validate
  var validation = sample.filter(ee.Filter.gte('random', 0.7));

  // Train a RF classifier for the HOT image
  var trained_classifier = ee.Classifier.smileRandomForest(
                                    {numberOfTrees: trees,
                                    variablesPerSplit: splits,
                                    minLeafPopulation: leafpop,
                                    bagFraction: bag,
                                    maxNodes: nodes,
                                    seed: seeds
                                    })
                                    .train({
                                          features: training,
                                          classProperty: label,
                                          inputProperties: bands
                                          });
  

  // Classify the image.
  var classified = img.classify(trained_classifier);
            
  Export.image.toAsset({
              image: classified.clip(ROI),
              description: name,
              assetId: name,
              region: ROI,
              scale: scale,
              maxPixels:1e13
              });
              
  classified.evaluate(function() {
              
              var min_no = t_poly.reduceColumns({
                                 reducer: ee.Reducer.min(),
                                 selectors: [label]}).get('min');
              var max_no = t_poly.reduceColumns({
                                 reducer: ee.Reducer.max(),
                                 selectors: [label]}).get('max');
              
              
              Map.addLayer(classified.clip(ROI), {min:min_no.getInfo(), max:max_no.getInfo(),
                          palette: colors.getInfo()}, name);
              
              // Get a confusion matrix resubstitution accuracy.
              var trainAccuracy = trained_classifier.confusionMatrix();
              
              print(name + ' Resubstitution error matrix: ', trainAccuracy);
              print(name + ' Resubstitution overall accuracy: ', trainAccuracy.accuracy());

              // Classify the validation data.
              var validated = validation.classify(trained_classifier);
              
              // Get a confusion matrix representing expected accuracy.
              var testAccuracy = validated.errorMatrix(label, 'classification');
              print(name + ' Validation error matrix: ', testAccuracy);
              print(name + ' Validation overall accuracy: ', testAccuracy.accuracy());
  });
}

function historicalOptions(class_ref_type, use_cont_spec, cont_img, hist_img, t_poly_h, t_poly_c) {
  // CRA Type?
  var t_poly = null;
  if(class_ref_type === true){
    t_poly = t_poly_c;
  } else {
    t_poly = t_poly_h;
  }
  
  if (use_cont_spec === true) {
    return [t_poly, cont_img];
  } else {
    return [t_poly, hist_img];
  }
}

function historicalClassify(name, class_ref_type, use_cont_spec, cont_img, hist_img, t_poly_h, t_poly_c, label, bands, ROI, trees, splits, leafpop, bag, nodes, seeds, colors) {
  var options = historicalOptions(class_ref_type, use_cont_spec, cont_img, hist_img, t_poly_h, t_poly_c);
  var t_poly = options[0];
  var img = options[1];
  classify(name, img, t_poly, label, bands, ROI, trees, splits, leafpop, bag, nodes, seeds, colors);
}

// Historic High-tide Classification 
exports.HhotClassify = function(Hhot, class_ref_type, use_cont_spec, Chot, t_poly_h, t_poly_c, label, bands, ROI, trees, splits, leafpop, bag, nodes, seeds, colors) {
  historicalClassify('HOT_Classification_Historic', class_ref_type, use_cont_spec, Chot, Hhot, t_poly_h, t_poly_c, label, bands, ROI, trees, splits, leafpop, bag, nodes, seeds, colors);
};

// Historic Low-tide Classification
exports.HlotClassify = function(Hlot, class_ref_type, use_cont_spec, Clot, t_poly_h, t_poly_c, label, bands, ROI, trees, splits, leafpop, bag, nodes, seeds, colors) {
  historicalClassify('LOT_Classification_Historic', class_ref_type, use_cont_spec, Clot, Hlot, t_poly_h, t_poly_c, label, bands, ROI, trees, splits, leafpop, bag, nodes, seeds, colors);
};

// Historic Combined Classification
exports.HcomClassify = function(Hhot, Hlot, class_ref_type, use_cont_spec, Chot, Clot, t_poly_h, t_poly_c, label, bands, ROI, trees, splits, leafpop, bag, nodes, seeds, colors) {
  Hhot = Hhot.select(bands);
  Hlot = Hlot.select(bands);  
  Chot = Chot.select(bands);
  Clot = Clot.select(bands); 
  var Hcom = Hhot.addBands(Hlot);
  var Ccom = Chot.addBands(Clot);
  bands = Ccom.bandNames();
  historicalClassify('Combined_Classification_Historic', class_ref_type, use_cont_spec, Ccom, Hcom, t_poly_h, t_poly_c, label, bands, ROI, trees, splits, leafpop, bag, nodes, seeds, colors);
};

function sample_regions(img, collection, props, scale, tileScale) {
  return img.sampleRegions({
    collection: collection,
    properties: props,
    scale: scale, 
    tileScale: tileScale
  });
}
  
exports.sample_image = function(img, tpoly, props, scale) {
  var sample = null;
  if (scale < 20) {
    var ts = 1;
    
    var fifth = tpoly.size().divide(5).int().add(1);
    
    s1 = sample_regions(img, ee.FeatureCollection(tpoly.toList(fifth)), props, scale, ts);
    s2 = sample_regions(img, ee.FeatureCollection(tpoly.toList(fifth, fifth)), props, scale, ts);
    s3 = sample_regions(img, ee.FeatureCollection(tpoly.toList(fifth, fifth.multiply(2))), props, scale, ts);
    s4 = sample_regions(img, ee.FeatureCollection(tpoly.toList(fifth, fifth.multiply(3))), props, scale, ts);
    s5 = sample_regions(img, ee.FeatureCollection(tpoly.toList(fifth, fifth.multiply(4))), props, scale, ts);
    
    // this seems to work for splitting the work up to avoid too many concurrent aggregations
    // while also not requiring us to pull down the full FeatureCollection locally
    sample = ee.FeatureCollection([s1, s2, s3, s4, s5]).flatten();
  }  else {
    sample = sample_regions(img, tpoly, props, scale, 16);
  }
  
  return sample;
};
