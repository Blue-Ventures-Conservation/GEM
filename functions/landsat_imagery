/*

This is the contemporary imagery module, which is part of the BVC GEM v1.2+ library.
It is used to collect recent Landsat 8 imagery for the area of interest.

Last update: 10 October 2024

*/

var shoreRefl = require('users/yanchojo/GEM_LS9_colors/:modules/MNDWI_tidal_function');

exports.doc = 'The imagery module is used to collect images for the ROI.' +
    '\n The output is an image collection ready to be sorted into high and low tide groups. ' +
    '\n It includes .' +
    '\n' +
    '\n LSimagery(roi, year1, year2, cloudCoverLimit, month_1, month_2, cloud_mask):' +
    '\n   @param {ee.Geometry} roi: the region of interest, produced by GEM' +
    '\n   @param {numeric} year1: oldest year of interest' +
    '\n   @param {numeric} year2: most recent year of interest' +
    '\n   @param {numeric} cloudCoverLimit: percentage of allowable cloud cover' +
    '\n   @param {numeric} month_1: oldest month of interest (1:12)' +
    '\n   @param {numeric} month_2: most recent month of interest (1:12)' +
    '\n   @param {numeric} month_2: most recent month of interest (1:12)' +
    '\n   @param {character} cloud_mask: how clouds are removed. Valid inputs are none, mild, and aggressive' +
    '\n   @return {ee.Image} An image collection with clouds removed.';

exports.LSimagery = function(roi, year1, year2, cloudCoverLimit, month_1, month_2, cloud_mask, tidalArea){
  return get_imagery(false, true, roi, year1, year2, cloudCoverLimit, month_1, month_2, cloud_mask, tidalArea);
};

exports.LSimagery_sans7 = function(roi, year1, year2, cloudCoverLimit, month_1, month_2, cloud_mask, tidalArea){
  return get_imagery(true, false, roi, year1, year2, cloudCoverLimit, month_1, month_2, cloud_mask, tidalArea);
};

exports.LSimagery_smart_ls7 = function(force_ls7, roi, year1, year2, cloudCoverLimit, month_1, month_2, cloud_mask, tidalArea){
  return get_imagery(false, force_ls7, roi, year1, year2, cloudCoverLimit, month_1, month_2, cloud_mask, tidalArea);
};

function filter_ls7(force, roi, cloud_limit, year1, year2, month1, month2) {
  var justMay = month1 == 5 && month2 == 5;
  var normal = month1 < month2;
  var wrapping = month1 > month2;
  var monthRangeOverlaps = (wrapping && month1 <= 5) || (wrapping && month2 >= 5) || (normal && month1 <= 5);
  var monthsOverlap = justMay || monthRangeOverlaps;
  var overlaps = year1 < 2003 || (year1 == 2003 && monthsOverlap);
  if (!force && !overlaps) {
    return ee.ImageCollection([]);
  }
  
  var truncate = !force && (year2 > 2003 || (year2 == 2003 && monthsOverlap));
  
  var ls7col = ee.ImageCollection("LANDSAT/LE07/C02/T1_L2");
  var dateFiltered = ee.ImageCollection([]);
  if (truncate) {
    var fullYears = ee.ImageCollection([]);
    if (year1 < 2003) {
      fullYears = ls7col.filterDate(year1 +'-01-01', '2003-01-01')
        .filter(ee.Filter.calendarRange(month1, month2, 'month'));
    }
    
    var truncated = ls7col.filterDate('2003-01-01', '2003-05-30')
      .filter(ee.Filter.calendarRange(month1, 5, 'month'));
    
    dateFiltered = truncated.merge(fullYears);
  } else {
    var y2 = year2 + 1;
    dateFiltered = ls7col.filterDate(year1 + '-01-01', y2 + '-01-01')
      .filter(ee.Filter.calendarRange(month1, month1, 'month'));
  }
  
  return dateFiltered.filterBounds(roi)
    .filterMetadata('CLOUD_COVER', 'not_greater_than', cloud_limit);
}

// ignore takes precendence over force here
function get_imagery(ignore_ls7, force_ls7, roi, year1, year2, cloudCoverLimit, month_1, month_2, cloud_mask, tidalArea) {
  // collect the LS4 imagery
  var col4 =  ee.ImageCollection("LANDSAT/LT04/C02/T1_L2")
    // filter to the path/row
    .filterBounds(roi) 
    // filter to the set cloud cover
    .filterMetadata('CLOUD_COVER', 'not_greater_than', cloudCoverLimit) 
    // filter for selected year range
    .filterDate( year1 + '-01-01', year2 + '-12-31')
    // filter for selected year range
    .filter(ee.Filter.calendarRange(month_1, month_2,'month'));
    //apply scaling factor
    //.map(applyScaleFactors);
  
  // collect the LS5 imagery
  var col5 =  ee.ImageCollection("LANDSAT/LT05/C02/T1_L2")
    // filter to the path/row
    .filterBounds(roi)
    // filter to the set cloud cover
    .filterMetadata('CLOUD_COVER', 'not_greater_than', cloudCoverLimit)
    // filter for selected year range
    .filterDate( year1 + '-01-01', year2 + '-12-31')
    // filter for selected month range
    .filter(ee.Filter.calendarRange(month_1, month_2,'month'));
    //apply scaling factor
    //.map(applyScaleFactors);
    
  // collect the LS7 imagery
  var col7 = filter_ls7(force_ls7, roi, cloudCoverLimit, year1, year2, month_1, month_2);

  // load landsat 8 imagery
  var col8 = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") 
    // filter imagery for path/row tile
    .filterBounds(roi)
    // filter for cloud cover using the user specified threshold
    .filterMetadata('CLOUD_COVER', 'not_greater_than', cloudCoverLimit)
    // filter for year
    .filterDate( year1 + '-01-01', year2 + '-12-31')
    //filter the the months of interest
    .filter(ee.Filter.calendarRange(month_1, month_2,'month'));
    //apply scaling factor
    //.map(applyScaleFactors);
    
  // load landsat 9 imagery
  var col9 = ee.ImageCollection("LANDSAT/LC09/C02/T1_L2") 
    // filter imagery for path/row tile
    .filterBounds(roi)
    // filter for cloud cover using the user specified threshold
    .filterMetadata('CLOUD_COVER', 'not_greater_than', cloudCoverLimit)
    // filter for year
    .filterDate( year1 + '-01-01', year2 + '-12-31')
    //filter the the months of interest
    .filter(ee.Filter.calendarRange(month_1, month_2,'month'));
    //apply scaling factor
    //.map(applyScaleFactors);
   
    //RENAME BANDS
    var OLI_images = ee.ImageCollection(col8.merge(col9))
                    .select(['SR_B2','SR_B3','SR_B4','SR_B5','SR_B6','SR_B7','ST_B10','QA_PIXEL'],
                    ['B1','B2','B3','B4','B5','B7','B6','pixel_qa']);
    
    var tms = col5.merge(col4);
    
    if (!ignore_ls7) {
      tms = col7.merge(tms);
    }
    
    //merge TM/ETM+ the collections 
    var TM_images = ee.ImageCollection(tms)
                   .select(['SR_B1','SR_B2','SR_B3','SR_B4','SR_B5','SR_B7','ST_B6','QA_PIXEL'],
                   ['B1','B2','B3','B4','B5','B7','B6','pixel_qa']);
   
    // set spectral coefiecients
    var coefficients = {
      itcps: ee.Image.constant([0.0003, 0.0088, 0.0061, 0.0412, 0.0254, 0.0172])
             .multiply(10000),
       slopes: ee.Image.constant([0.8474, 0.8483, 0.9047, 0.8462, 0.8937, 0.9071])
    };
   
   
   // Transform TM/ETM+ iamges to OLI values
  function etmToOli(img) {
    return img.select(['B1','B2','B3','B4','B5','B7'])
            .multiply(coefficients.slopes)
            .add(coefficients.itcps)
            .round()
            .toShort()
            .addBands(img.select('B6', 'pixel_qa'));
          }
   
  TM_images = TM_images.map(etmToOli); 
   
  
  // Scaling factors  image
  function applyScaleFactors(image) {
      var opticalBands = image.select(['B1','B2','B3','B4','B5','B7']).multiply(0.0000275).add(-0.2);
      var thermalBand = image.select(['B6']).multiply(0.00341802).add(149.0);
      return image.addBands(opticalBands, null, true)
                  .addBands(thermalBand, null, true);
    }
  
   // Apply scaling factors to LS all bands
   var images = OLI_images.merge(TM_images).map(applyScaleFactors);
   
   //Fix float type error
   function fixFloat(image){
      var specCast = image.select(['B1','B2','B3','B4','B5','B7']).cast({'B1':'float',
                                                                         'B2': 'float',
                                                                         'B3': 'float',
                                                                         'B4': 'float',
                                                                         'B5': 'float',
                                                                         'B7': 'float'});
      return image.addBands(specCast, null, true);
    }
    
   function doubleOO(image) {
      var clamped = image.select(['B5']).clamp(0,1);
      clamped = clamped.addBands(image.select(['B1','B2','B3','B4','B7','B6', 'pixel_qa']));
      return clamped;
    } 
    
    images = images.map(fixFloat).map(doubleOO);
    images = shoreRefl.shoreRefl(images, tidalArea, roi, null);
    images = shoreRefl.tide_bands(images);
    
    // function for adding bands inspectable bands for the date of each pixel
    function datePixels(img) {
      var segs = ee.List(ee.String(img.get('system:index')).trim().split("_").iterate(function(item, prev) {
        return ee.Algorithms.If(ee.String(item).length().gt(1), ee.List(prev).add(item), prev);
      }, ee.List([])));
      // true when Landsat, false implies Sentinel-2
      var str = ee.String(ee.Algorithms.If(ee.String(segs.get(0)).length().eq(4), segs.get(2), ee.String(segs.get(0)).split('T').get(0)));
      var year = ee.Number.parse(str.slice(0, 4));
      var month = ee.Number.parse(str.slice(4, 6));
      var day = ee.Number.parse(str.slice(6, 8));
      var date = ee.Date.fromYMD(year, month, day);
      return img.addBands(ee.Image([date.get('day'), date.get('month'), date.get('year')]).rename(['day', 'month', 'year']).cast({'day':'byte', 'month':'byte', 'year':'short'}));
    }
    
    images = images.map(datePixels);

    if(cloud_mask === "none"){ images = images;}else{
      if(cloud_mask === "mild"){ images = images.map(function(img){
        // Bits 3 and 5 are cloud shadow and cloud, respectively.
        var cloudShadowBitMask = (1 << 3);
        var cloudsBitMask = (1 << 5);
        // Get the pixel QA band.
        var qa = img.select('pixel_qa');
        // Both flags should be set to zero, indicating clear conditions.
        var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)
                     .and(qa.bitwiseAnd(cloudsBitMask).eq(0));
    
        // Define a kernel.
        var kernel = ee.Kernel.gaussian({radius: 10});
    
        // Perform an erosion followed by a dilation, display.
        var opened = mask.focal_min({kernel: kernel, iterations: 1});
  
        return img.updateMask(opened);              
      });
      }else{
        var masked_1 = images.map(function(img){
          // Bits 3 and 5 are cloud shadow and cloud, respectively.
          var cloudShadowBitMask = (1 << 3);
          var cloudsBitMask = (1 << 5);
          // Get the pixel QA band.
          var qa = img.select('pixel_qa');
          // Both flags should be set to zero, indicating clear conditions.
          var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)
                       .and(qa.bitwiseAnd(cloudsBitMask).eq(0));
    
          // Define a kernel.
          var kernel = ee.Kernel.gaussian({radius: 10});
    
          // Perform an erosion followed by a dilation, display.
          var opened = mask.focal_min({kernel: kernel, iterations: 1});
  
          return img.updateMask(opened);              
        });            

        images = masked_1.map(function(image){
            
          var B1_wt = image.select('B1').gte(0.0284615);
          var B2_wt = image.select('B2').gte(0.0284615);
          var B3_wt = image.select('B3').gte(0.0284615);
          var B6_wt = image.select('B6').lte(0.0450904);
          var weight_mask = B2_wt.add(B3_wt).add(B2_wt).add(B6_wt).gte(4).eq(0);
      
          // Define a kernel.
          var kernel = ee.Kernel.gaussian({radius: 3});
    
          // Perform an erosion followed by a dilation, display.
          weight_mask = weight_mask
                   .focal_min({kernel: kernel, iterations: 1});

          return image.updateMask(weight_mask);
        });
      }}

    return images;
}
