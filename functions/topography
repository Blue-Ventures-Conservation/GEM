/*

This is the topography module, which is part of the BVC GEM v1.2 library.
Two funtions:

dsm_id: determines whether the user will use the GEE JAXA topographic dataset
        or the user prefers to ingest their own raster-based topographic data

topo_mask_func: the topographic data is used to generate a pixel masck, based
                on elevation and slope thresholds.

Last update: 10 July 2025

*/
exports.dsm_id = function(topo, topo_path){
  // topo is true/false user identified boolean value 
  var topo_t = function(){
      // when 'TRUE' the topo data from GEE will be ingested
      var elev = ee.ImageCollection('JAXA/ALOS/AW3D30/V4_1').select('DSM');
      var proj = elev.first().select(0).projection();
      return elev.mosaic().setDefaultProjection(proj).rename("elev");
  };

  var topo_f = function(topo_path){
    // when false the users topo data will be brought in
    return ee.Image(topo_path).rename('elev');
  }; 

  var dsm = ee.Algorithms.If(topo, topo_t(), topo_f(topo_path));

  var slp_img = ee.Terrain.slope(ee.Image(dsm).select('elev'))
                .double().rename('slope');
  
  dsm = ee.Image(dsm).addBands(slp_img);
  
  
  return dsm;
};


exports.topo_mask_func = function(dsm, mangroves, mang_topo, elevation, slope){

  dsm = ee.Image(dsm);
  //extract slope and elevation 99th precentile from known mangrove extent
  var mang_elv = dsm.select('elev').updateMask(mangroves)
                  .reduceRegion({
                    reducer: ee.Reducer.percentile({percentiles: [99]}),
                    geometry: mangroves.geometry(),
                    scale: 30,
                    maxPixels: 1e12,
                    bestEffort: true
                    });

  var mang_slope = dsm.select('slope').updateMask(mangroves)
                   .reduceRegion({
                    reducer: ee.Reducer.percentile({percentiles: [99]}),
                    geometry: mangroves.geometry(),
                    scale: 30,
                    maxPixels: 1e12,
                    bestEffort: true
                    });
                    
  
  var el_val = ee.Image.constant(mang_elv.get('elev'));
  var slp_val = ee.Image.constant(mang_slope.get('slope'));
  
  if (mang_topo === true){
    var topo_mask = dsm.select('elev').lte(el_val)
                        .and(dsm.select('slope').lte(slp_val)).double();
    return topo_mask; 
  } else {
    var topo_mask = dsm.select('elev').lte(elevation)
                        .and(dsm.select('slope').lte(slope)).double();
    return topo_mask; 
  }
};



