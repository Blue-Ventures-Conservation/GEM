////////////////////////////////////////////////////////////////////////////////
//////////      Google Earth Engine Mangrove Mapping Methodology     ///////////
//////////                     (GEM) Module  2                    ///////////
////////////////////////////////////////////////////////////////////////////////

/* 

This code was developed for Blue Ventures Conservation, by Max Yancho.
Questions about the project and the application of the script(s) should be 
directed to Dr. Trevor Jones, Geospatial & Blue Forests Science Adviser 
(trevor@blueventures.org). Questions about the code can be directed to 
Mr. Court Fowler (courtland.fowler@blueventures.org).

Developed on:  3 June 2020
Last updated: 22 August 2024

Throughout this tool you will find references to the user name 'yanchojo'. This 
is Mr. Yancho's (the primary developer) personal Google account. Future 
iterations of the Google Earth Engine Mangrove Mapping Methodology (GEM) 
will be hosted by a Blue Ventures Conservation Google account.




///////////////////////////////////////////////
//////////////  Before  Running  //////////////
///////////////////////////////////////////////


Welcome to Module 2 of the GEM. This module will be used to: 1.) Explore the 
spectral relationships between the classification reference areas (CRAs) classes. 2.) 
Generate the land cover classification maps using the inputs from Module 1 and the 
Random forest classifier. Module 2’s workflow is less linear than Module 1’s. In the first 
step, the user can generate a series of charts and tables that they can use to explore index 
correlations and spectral separability between land cover classes. The primary output 
from Module 2 are the single-band land cover classification images, the number can 
range from one to six classifications (see below). Associated with each classification are
quantitative accuracy metrics and matrices. 

GEM Module 2 is broken down into 3 sections:

    Section 1: The user sets the inputs and parameters (including the CRAs), and reestablishes 
               the chosen indices. 

    Section 2: The spectral relationship section. The user can view the spectral space of 
               each land cover class across any of the  various bands or indices. 
               Additionally, correlation matrices can be generated for the calculated 
               indices. Take time to explore the data in this step, and affirm that the 
               desired land cover classes are truly spectrally distinct.

    Section 3: The classification section. Depending on the desired output 
               maps, chosen before the script is run, the classification(s) will be added 
               to the map viewer and the accuracy metrics will populate in the console 
               including the validation overall accuracy, validation matrix, the 
               resubstitution overall accuracy, and the resubstitution matrix. 

The classification reference areas (CRAs) will be divided to separately train and then 
validate the classifier and classification results, respectively. Randomly, 70% of the CRAs
will be used to train the classifier, and the remaining 30% are used to validate the results.
The CRAs used in the GEM pilot study employed the coordinate reference system (CRS) 
"EPSG:4326 - WGS 84". However, GEE "... is designed so that you rarely have to worry about 
map projections when doing computations." Follow the link below to learn more about GEE and 
data projections:  https://developers.google.com/earth-engine/guides/projections

The output classification images should be exported to the user’s assets. After pressing the 
‘Run’ button at the top of the script editor, the user will be re-prompted to select the indices 
they selected in Module 1. Once the workflow has begun it can take as little as two minutes to 
work through Module 2 and view classification results, not accounting for exporting times of the 
outputs or prolonged exploration of the spectral separability. Times may vary depending on internet
speed.

The default parameters, as discussed in the GEM ReadMe file, were established 
during a pilot study conducted for the country of Myanmar (Burma). Many of 
these parameters may also work for other parts of the world, but the developers 
make no claims about the transferability of default settings to other locations.
For applying the GEM elsewhere, please pay careful attention to the parameters 
and set them according to the local situation and project goals/objectives.   

At the end of the workflow, the user should have started exporting:
    1.) 1 - 6 land cover maps
        a.) High tide comtemporary land cover map
        b.) Low tide comtemporary land cover map
        c.) Combination comtemporary land cover map
        d.) High tide historical land cover map
        e.) Low tide historical land cover map
        f.) Combination historical land cover map
    * - Additionally, they may have saved the output classification
        accuracy metrics or any of the graphs/tables from Section 2

Before running Module 2, please read through the comments below to determine 
important user inputs and parameters that will be used in this workflow. Continue until 
you reach the end, where you will be prompted to now ‘Run’ the script.

*** Note: Be sure that the 'Code Editor', 'Console' tab, and the map viewer are
all visible on your screen before proceeding ***

////////////////////////////////////////////////////////////
//////////////    User Inputs & Parameters    //////////////
////////////////////////////////////////////////////////////


0.0)

!

Bring in Imagery and Masks exported from Module 1. Name as follows:

  Chot = HOT contemporary composite (HOT_Img_contemporary); highest observed tide
  Clot = LOT contemporary composite (LOT_Img_contemporary); lowest observed tide

  Hhot = HOT historical composite (HOT_Img_historic); highest observed tide
  Hlot = LOT historical composite (LOT_Img_historic); lowest observed tide

  final_mask = Finalized mask (final_mask)
  
  ROI =  Finalized ROI (ROI), region of interest 

This can be done by selecting the assets from the 'Asset' tab and clicking the 
arrow to import the asset to this script. Once imported, the name can be changed
by clicking the automatic 'image' name (see top of the script) and renaming.

///////////////////////////////////////////////
/////////    Section 1: User Inputs  //////////
///////////////////////////////////////////////

1.A) Classification Reference areas 
     The most significant input for the classification are the classification
     reference areas (CRAs). The CRAs set must be created by the user. 
     This can be done within the GEE environment or externally and uploaded as a 
     GEE user asset. To execute the classification, the user will be asked below 
     about several important parameters associated with the classification
     process, but at this time the user must simply identify the classification 
     reference areas that will be used to determine the output land cover classes.
     This is a vector dataset. It can be a multi-point or multi-polygon geometry. 
     It is also important that the user declares which field the class labels 
     (numeric & character) are recorded in. There should be an integer
     (class_label_numeric) and character (class_label_character) name associated
     with each CRA class.
     
     In addition, there is an optional plot_id_label that is used in some of the
     charts produced during spectral analysis to show which values belong to
     specific plots, which can be helpful when tracking down plots that aren't
     being separated from plots of other classes during classification.
     
     Enter:
          var class_ref = **PATH**; (Path to the CRAs)
*/

var class_ref_cont = "projects/gem-project-378721/assets/users/4FRqmoJouHUQmYudmpUq9tN5Ob52/TAB_CRA_2020_210224_binary";
var class_ref_hist = "projects/gem-project-378721/assets/users/4FRqmoJouHUQmYudmpUq9tN5Ob52/TAB_CRA_2000_210301_binary";
// Landcover labels for the classifier
var class_label_numeric = 'Classvalue';
var class_label_character = 'Classname';
var plot_id_label = "";



/*
1.B) Classification Reference Area (CRA) Type
     Record type of CRA. It is important for the GEM that the user distinguishes 
     their CRAs as either spatio-temporally invariant across the time-period (historical
     and contemporary imagery) or derived from just contemporary sources. 
     
     1.) Spatio-temporally invariant: The CRAs have not changed between the historical
                                      years of interest and the contemporary years of 
                                      interest. - a single set of CRAs is used for both
                                      classifications.
     2.) Not spatio-temporally invariant: The CRAs have changed between the historical years 
                                          of interest and the contemporary years of interest 
                                          - a separate set of CRAs is used for each 
                                          classification (i.e., historical and contemporary). 
                            
     These are important distinctions to make. If the CRAs are not spatio-temporally 
     invariant, the classifier will be retrained for both the historical and contemporary 
     image sets.  If the CRAs are spatio-temporally invariant, the same set will be used 
     for historical and contemporary classifications.  
     
     Enter:
          var class_ref_type = true; (the CRAs are spatio-temporally invariant)
          var class_ref_type = false; (the CRAs are NOT Spatio-temporally invariant)
*/

var class_ref_type = false;

/*
1.B.i) Classification Reference Area (CRA) Type: Missing Historical CRA
  If the data is not spatio-temporally invariant, but historical CRAs are not available, the
  user has the option to use contemporary landsat spectral values for trained contemporary
  CRAs subset to classify the historical data. For this feature to work 'class_ref_type' needs 
  to be set to 'true' to ensure that the historical classifications are using the contemporary 
  CRAs data and the 'use_cont_spec' (below) must be set to 'true'. 
  
  Alternatively, historical outputs do not need be generated in Module 2. Simply make all of the
  historical classification outputs in 1.D to 'false'. However, if this is the case the dynamics
  analysis in Module 3 will not work properly (since there will only be one land cover map).
  
          **NOTE: Default is 'false'. Do not switch to 'true' unless certain.**
  
       Enter:
          var use_cont_spec = true; (uses the contemporary trained classifier to 
                                      classify the historical imagery)
          var use_cont_spec = false; (uses the CRAs data as designated in 1.A)

*/

var use_cont_spec = false; 

/*
1.C) Classifier
     GEE offers a variety of classifiers. These come in both supervised and 
     unsupervised classifier choices. At this time however, the GEM is built to
     run the Random Forest Classifier, a supervised decision tree classifier.
     Future versions will offer more classification options. The Random Forest 
     classifier is one of the most well-researched classifiers, and has routinely
     been shown to produce accurate results. 

     Enter:
          var classifier = 'RF'; (To use the Random Forest Classifier)
*/

var classifier = 'RF';
var trees = 200;

/*

1.D) Output Structure
     The outputs from the GEM can be generated as either a combined
     (where the high- and low-tide data are combined into a single collection) 
     or separate (individual high- and low-tide) classifications. Outputs below can 
     be turned on and off by adding a 'true'/'false' to the corresponding 
     variable input. The historical and contemporary data is separable into LOT
     and HOT components. (HOT: Highest Observable Tide; LOT: Lowest Observable
     Tide.)
     
     Enter:
          var XXX_out = true; (Classify and export this composite)
          var XXX_out = false; (No action)
*/
var HOT_cont_out = false;        // High tide comtemporary Imagery
var LOT_cont_out = false;        // Low tide comtemporary Imagery
var combo_cont_out = true;     // Combination comtemporary Imagery
var HOT_hist_out = false;        // High tide historical Imagery
var LOT_hist_out = false;        // Low tide historical Imagery
var combo_hist_out = true;     // Combination historical Imagery


/*    
    ****************************************************************************
    **********************         Click 'Run' Now        **********************
    ****************************************************************************
    
    
      ** This line marks the end of the user-defined inputs and variables. **
    
      What follows is the bulk of the script for module 2 - below this line 
      the user does not need to further change anything. Comments are provided
      for each section/step below so the user can understand how the script 
      actually works. All further user action occurs in the ‘Console'.
      
      NOTE:
      -Once the workflow begins, you will have to re-select the indices from
       GEM Module 1. 
      -Take as much time as you need to explore the spectral relationships of 
       the CRAs and input composite bands. Some items take a while to load, 
       so do not initate more than one task at a time.
      -The spectral correlation matrices take a long time to generate and 
       may freeze the browser. The more indices being correlated the longer
       this task will take. If an memory limit error occurs, click the button
       again to re-start the task. It should load the second time.
      -The classification can be started at anytime.
      -Do not change the name of the exports unless you are an advanced GIS user
      
      
                *** DO NOT EDIT ANYTHING BELOW THIS LINE ***
*/




















////////////////////////////////////////////////////////////////////////////////
// Required Modules
// Functions are brought into GEM Module 2 through the require() function

var RFclass = require('users/courtlandfowler/gemv2:rf_classer');
var InCor = require('users/yanchojo/GEM_LS9_colors/:modules/input_correlation');
var specSp = require('users/yanchojo/GEM_LS9_colors/:modules/spec_area');

var label = class_label_numeric;
var label2 = class_label_character;
var label3 = plot_id_label;



var lc_names = ui.data.ActiveList(ee.FeatureCollection(class_ref_cont).distinct(label).sort(label)
                                  .aggregate_array(label2).getInfo());

var colList = {'purple':'purple', 'red':'red','pink':'pink','orange':'orange',
               'yellow':'yellow', 'darkgreen':'darkgreen', 'green': 'limegreen', 'lightgreen':'lightgreen',
               'cyan':'cyan','lightblue':'lightblue','blue':'blue','brown':'saddlebrown', 'lightbrown':'burlywood',
               'black':'black', 'white':'white', 'grey':'grey', 'lightgrey':'lightgrey'};

var colors = ee.List.sequence(0,ee.Number(lc_names.length()).subtract(1),1);

lc_names.forEach(function(x){
  var col_drop = ui.Select({
                              placeholder: ee.String("Select " + x + " Colour").getInfo(),
                              items: Object.keys(colList),
                              onChange: function(key) { colors = colors.set(lc_names.indexOf(x), colList[key])}
                              });
 print(x);
 print(col_drop);
});

print(ui.Label({
                            value: 'View Color Selection',
                            style: {
                                    fontWeight: 'bold',
                                    fontSize: '14px',
                                    textAlign: 'center'
                                    }
                          }));   

// Print color list button
var button = ui.Button({
  label: 'Print Colour List',
  onClick: function() {
    var ordered_labs = ee.FeatureCollection(class_ref_cont).distinct(label).sort(label)
                                  .aggregate_array(label2);
    alert('Land Cover Color List:' + ee.String.encodeJSON(ee.Dictionary.fromLists(ordered_labs, ee.List(colors)))
                          .replace('"', ' ', 'g' ).replace(',', '\n', 'g' ).replace('{', '\n', 'g' )
                          .replace('}', '', 'g' ).getInfo());
    return ee.List(colors);
    }
  });
print(button);

print(ui.Label({
                            value: 'Sections 2 & 3',
                            style: {
                                    fontWeight: 'bold',
                                    fontSize: '16px',
                                    textAlign: 'center'
                                    }
                          }));      


///////////////////////////////////////////////
///     Section 2: Spectral Separability    ///
///////////////////////////////////////////////
// This section allows the user to interactively explore the spectral relationshops
// between their CRAs and their input imagery/indices. The graphs can be expanded and
// saved as independant PNG or SVG files.

var step_1_button = ui.Button('Sec. 2.) View Spectral Space \n and Ref. Data Relationships');
step_1_button.onClick(function(){
  
  print(ui.Label({value:'Module 2: Section 2',
                style:{fontWeight: 'bold',
                        fontSize: '18px',
                        textAlign: 'center'}
                }));
  print('Select the bands to be used for Pearson correlation:');
  // Quickly re-select the indices from Module 1
  var blist = Chot.bandNames().remove('B6').getInfo();

  // Generate the empty index list
  var indx = ee.List.repeat("", blist.length);
  
  // List of reference indices
  var OG_band_list = ui.data.ActiveList(blist);

  // Create checkboxes 
  OG_band_list.forEach(function(x){
    var ind_box = ui.Checkbox(x, false);
    ind_box.onChange(function(checked) {
      // Add/remove the index to the list
      if (checked === true) {
        indx = indx.set(blist.indexOf(x), x);
      } else {
        indx = indx.set(blist.indexOf(x), "");
      }
    }); 
    print(ind_box);
  });
  
  // Print instructions
  print('Print the band/index list to review \ncorrelation inputs selected');
  
    var button2 = ui.Button({
    label: 'View Band/Index Input',
    onClick: function() {
      alert('Correlation Band/Index Input:' +
              ee.String.encodeJSON(indx.filter(ee.Filter.neq('item', "")).distinct()).replace('"', ' ', 'g' ).replace(',', '\n', 'g' ).replace('{', '\n', 'g' )
                            .replace('}', '', 'g' ).getInfo());
      return ee.List(indx);
      }
    });
  print(button2);
  
  
  print('Select the classes to be used for scatter plots:');
  var clz = ee.FeatureCollection(class_ref_cont).distinct(label).sort(label)
                                  .aggregate_array(label2);

  // Create checkboxes 
  lc_names.forEach(function(x){
    var clz_box = ui.Checkbox(x, true);
    clz_box.onChange(function(checked) {
    // Add/remove the class to the list
    if (checked === true){clz = clz.add(x);
    } else {clz = clz.remove(x);}}); 
    print(clz_box);
  });
  
  // Print instructions
  print('Print the class list to review \nscatter plot inputs selected');
  
    var clz_button = ui.Button({
    label: 'View Class Input',
    onClick: function() {
      alert('Scatter Plot Class Input:' +
              ee.String.encodeJSON(clz.distinct()).replace('"', ' ', 'g' ).replace(',', '\n', 'g' ).replace('{', '\n', 'g' )
                            .replace('}', '', 'g' ).getInfo());
      return ee.List(clz);
      }
    });
  print(clz_button);

  var step_1a_button = ui.Button('Start Spectral Analysis');
  step_1a_button.onClick(function(){

  var bands = Chot.bandNames();
  var h_bands = Hhot.bandNames();

  // Training polygons
  var t_poly_c = ee.FeatureCollection(class_ref_cont).sort(label);
  var t_poly_h = ee.FeatureCollection(class_ref_hist).sort(label);
  
  var prop_labels = [label, label2];
  
  if (label3 !== null && label3 !== "") {
    prop_labels = prop_labels.concat([label3]);
  }
  
  var imagery_scale = Chot.projection().nominalScale().getInfo();

  // Overlay the points on the imagery to get training for HOT
  var sample_CHOT = RFclass.sample_image(Chot.select(bands), t_poly_c, prop_labels, imagery_scale);
  var sample_CLOT = RFclass.sample_image(Clot.select(bands), t_poly_c, prop_labels, imagery_scale);
  var sample_HHOT = RFclass.sample_image(Hhot.select(bands), t_poly_h, prop_labels, imagery_scale);
  var sample_HLOT = RFclass.sample_image(Hlot.select(bands), t_poly_h, prop_labels, imagery_scale);

  var header = ui.Label({
                          value: 'View the Spectral Relationships of the Reference Data',
                          style: {
                                    fontWeight: 'bold',
                                    fontSize: '20px',
                                    textAlign: 'center'
                                  }
                        });   
  print(header);   
  print(ui.Label({value:'Index Correlations',
                  style:{fontWeight: 'bold',
                         fontSize: '18px',
                         textAlign: 'center'}
                }));
  print('Select any of the composite buttons below'+
        '\nto view the index band correlation matrix'+
        '\nfor that composite.');         
  // Create correlation buttons
  
  function corelationIndices() {
    return indx.filter(ee.Filter.neq('item', "")).distinct();
  }
  
  var chot_cor_but = ui.Button('View CHOT Index Band Correlation');
  chot_cor_but.onClick(function(){
    print('Cont. HOT Index Band Correlation');
    InCor.pearson_cor_mat(Chot, corelationIndices(), t_poly_c);});
  var clot_cor_but = ui.Button('View CLOT Index Band Correlation');
  clot_cor_but.onClick(function(){
    print('Cont. LOT Index Band Correlation');
    InCor.pearson_cor_mat(Clot, corelationIndices(), t_poly_c);
    });
  var hhot_cor_but = ui.Button('View HHOT Index Band Correlation');
  hhot_cor_but.onClick(function(){
    print('Hist. HOT Index Band Correlation');
    InCor.pearson_cor_mat(Hhot, corelationIndices(), t_poly_h);});
  var hlot_cor_but = ui.Button('View HLOT Index Band Correlation');
  hlot_cor_but.onClick(function(){
    print('Hist. LOT Index Band Correlation');
    InCor.pearson_cor_mat(Hlot, corelationIndices(), t_poly_h);});
  // Create correlation panel
  var cor_panel = ui.Panel({layout: ui.Panel.Layout.flow('horizontal')});
  cor_panel.add(chot_cor_but).add(clot_cor_but).add(hhot_cor_but).add(hlot_cor_but);
  print(cor_panel);
  print(ui.Label({value:'Spectral Separation Graphs',
                  style:{fontWeight: 'bold',
                         fontSize: '18px',
                         textAlign: 'center'}
                }));
  var bandDict = ee.Dictionary.fromLists(bands,bands).getInfo();
  // Create drop-down menu to select CHOT Band
  var Chot_band_charts = ui.Select({
                            placeholder: "Select Cont. HOT Band",
                            items: Object.keys(bandDict),
                            onChange: function(key) {
                            specSp.whiskerCharts2(sample_CHOT, label, label2, key, "Cont. HOT");
                            },
                              style: {position: 'top-left'}
                            });
  // Create drop-down menu to select CLOT Band
  var Clot_band_charts = ui.Select({
                            placeholder: "Select Cont. LOT Band",
                            items: Object.keys(bandDict),
                            onChange: function(key) {
                            specSp.whiskerCharts2(sample_CLOT, label, label2, key, "Cont. LOT");
                            },
                              style: {position: 'top-right'}
                          });
  // Create drop-down menu to select HHOT Band
  var Hhot_band_charts = ui.Select({
        placeholder: "Select Hist. HOT Band",
        items: Object.keys(bandDict),
        onChange: function(key) {
                              specSp.whiskerCharts2(sample_HHOT, label, label2, key, "Hist. HOT");
                              },
                              style: {position: 'top-left'}
                          });
  // Create drop-down menu to select HLOT Band
  var Hlot_band_charts = ui.Select({
                              placeholder: "Select Hist. LOT Band",
                              items: Object.keys(bandDict),
                              onChange: function(key) {
                              specSp.whiskerCharts2(sample_HLOT, label, label2, key, "Hist. LOT");
                              },
                            style: {position: 'top-right'}
                            });
                          

  print('The set of charts below shows the single band/index'+
    '\nrelationships betweeen the difference land cover classes.'+
    '\nTo view a graph, select a band from each of the drop-down'+
    '\nmenus, corresponding to the various image composites.');
               
  var cont_lab = ui.Label({
                            value: 'Contemporary Reference Data',
                            style: {
                                    fontWeight: 'bold',
                                    fontSize: '16px',
                                    textAlign: 'center'
                                    }
                          });      
  var hist_lab = ui.Label({
                          value: 'Historic Reference Data',
                          style: {
                                    fontWeight: 'bold',
                                    fontSize: '16px',
                                    textAlign: 'center'
                                    }
                          });   
  var cont_panel = ui.Panel({
                          layout: ui.Panel.Layout.flow('horizontal'),
                          style: {textAlign: 'center'
                          }
                        });
  var hist_panel = ui.Panel({
                            layout: ui.Panel.Layout.flow('horizontal'),
                            style: {textAlign: 'center'
                          }
                      });
  var sub_lab_chot = ui.Label({value: 'CHOT: '});   
  var sub_lab_clot = ui.Label({value: 'CLOT: '});   
  var sub_lab_hhot = ui.Label({value: 'HHOT: '});   
  var sub_lab_hlot = ui.Label({value: 'HLOT: '});   
                                

  /// Spectral Scatter plots
          
  var ref_samp = {
                  "Cont. HOT": ["Cont. HOT", sample_CHOT],
                  "Cont. LOT": ["Cont. LOT", sample_CLOT],
                  "Hist. HOT": ["Hist. HOT", sample_HHOT],
                  "Hist. LOT": ["Hist. LOT", sample_HLOT]
                  };
  var bandX = 'B3';
  var bandY = 'B4';
  var scat_samp = ["Cont. HOT", sample_CHOT];
  // Create drop-down menu to select X Band
  var bandX_drop = ui.Select({
                              placeholder: "Select X-Axis Band",
                              items: Object.keys(bandDict),
                              onChange: function(key) {
                              bandX = key;
                              }});
  // Create drop-down menu to select Y Band
  var bandY_drop = ui.Select({
                              placeholder: "Select Y-Axis Band",
                              items: Object.keys(bandDict),
                              onChange: function(key) {
                              bandY = key;
                              }});
  // Create drop-down menu to select sample
  var Sample_scat = ui.Select({
                              placeholder: "Select Refence Data Sample",
                              items: Object.keys(ref_samp),
                              onChange: function(key) {
                              scat_samp = ee.Dictionary(ref_samp).values([key]).flatten();
                              }});
  var scat_button = ui.Button('View Scatter Plot');
  scat_button.onClick(function(){
    var data = ee.FeatureCollection(ee.List(scat_samp).get(1)).filter(ee.Filter.inList(label2, clz));
    data = ee.Algorithms.If(data.size().gte(5000), ee.FeatureCollection(data.map(function(elem) {
        var feat = ee.Feature(elem);
        return feat.set(bandX, ee.Number(feat.get(bandX)).multiply(100).round().divide(100), bandY, ee.Number(feat.get(bandY)).multiply(100).round().divide(100));
    })).distinct(ee.List(prop_labels).add(bandX).add(bandY)), data);
    
    var samp_title = ee.List(scat_samp).get(0).getInfo();
    var Sc_chart =  ui.Chart.feature.groups(ee.FeatureCollection(data), bandX, bandY, label2)
                    .setChartType('ScatterChart')
                    .setOptions({title: 'Spectral Area of ' + samp_title});
    print(Sc_chart);
    if (label3 !== null && label3 !== "") {
          var plots_chart =  ui.Chart.feature.groups(data, bandX, bandY, label3)
                    .setChartType('ScatterChart')
                    .setOptions({title: 'Spectral Area of ' + samp_title});
          print(plots_chart);
    }
    
  });
            
            
  var scatter_panel = ui.Panel({
                    layout: ui.Panel.Layout.flow('horizontal'),
                    style: {textAlign: 'center'
                      }
                    });
                                
                                
  var samp_lab = ui.Label({value: 'Reference Sample: '});   
  var x_lab = ui.Label({value: 'X Band: '});   
  var y_lab = ui.Label({value: 'Y Band: '});
  var scat_lab = ui.Label({
                        value: 'Spectral Distribution for Reference Data',
                        style: {
                                  fontWeight: 'bold',
                                  fontSize: '18px',
                                  textAlign: 'center'
                              }
                  });

  var chot_bands = ui.Button('View LS Bands');
  chot_bands.onClick(function(){specSp.ls_candles(sample_CHOT, label, label2, "Cont. HOT", colors.getInfo())});
  var clot_bands = ui.Button('View LS Bands');
  clot_bands.onClick(function(){specSp.ls_candles(sample_CLOT, label, label2, "Cont. LOT", colors.getInfo())});
  var hhot_bands = ui.Button('View LS Bands');
  hhot_bands.onClick(function(){specSp.ls_candles(sample_HHOT, label, label2, "Hist. HOT", colors.getInfo())});
  var hlot_bands = ui.Button('View LS Bands');
  hlot_bands.onClick(function(){specSp.ls_candles(sample_HLOT, label, label2, "Hist. LOT", colors.getInfo())});


  print(cont_lab);
  print(cont_panel.add(sub_lab_chot).add(chot_bands).add(Chot_band_charts)
                  .add(sub_lab_clot).add(clot_bands).add(Clot_band_charts));
  print(hist_lab);
  print(hist_panel.add(sub_lab_hhot).add(hhot_bands).add(Hhot_band_charts)
                  .add(sub_lab_hlot).add(hlot_bands).add(Hlot_band_charts));
  print(scat_lab);
  print("Select any two bands from any sampled composite to view"+
        "\nthe spectral relationships between landcover classes.");
  print(scatter_panel.add(samp_lab).add(Sample_scat).add(x_lab).add(bandX_drop)
                     .add(y_lab).add(bandY_drop).add(scat_button));
  });
  print(step_1a_button);
});
print(step_1_button);



///////////////////////////////////////
///     Section 3: Classification   ///
///////////////////////////////////////
// The classification step will take the input imagery, CRAs, and user 
// parameters and generate the land cover maps requested. Additionally,
// all of the standard quantitative classification accuracy metrics are 
// printed to the cosnole.


var step_2_button = ui.Button('Sec. 3.) Classification');


var trees = 1000;
var splits = 1; 
var leafpop = 1;
var bag = 0.75;
var nodes = null; 
var seeds = 0; 


step_2_button.onClick(function(){
  
  print(ui.Label({value:'Module 2: Section 3',
                  style:{fontWeight: 'bold',
                         fontSize: '18px',
                         textAlign: 'center'}
                }));
  print('Select the bands to be used for classification:');


  // Quickly re-select the indices from Module 1

  // Generate the empty index list
  var indx = ee.List([]);
  
  // List of reference indices
  var OG_band_list = ui.data.ActiveList(Chot.bandNames().remove('B6').getInfo());

  // Create checkboxes 
  OG_band_list.forEach(function(x){
    var ind_box = ui.Checkbox(x, false);
    ind_box.onChange(function(checked) {
    // Add/remove the index to the list
    if (checked === true){indx = indx.add(x);
    } else {indx = indx.remove(x);}}); 
    print(ind_box);
  });
  
  // Print instructions
  print('Print the band/index list to review \nclassification inputs selected');

  var button2 = ui.Button({
    label: 'View Band/Index Input',
    onClick: function() {
      alert('Classification Band/Index Input:' +
              ee.String.encodeJSON(indx.distinct()).replace('"', ' ', 'g' ).replace(',', '\n', 'g' ).replace('{', '\n', 'g' )
                            .replace('}', '', 'g' ).getInfo());
      return ee.List(indx);
      }
    });
  print(button2);


  var step_2a_button = ui.Button('Start Classification');
  step_2a_button.onClick(function(){


    // Update the image masks
    Chot = Chot.updateMask(final_mask);
    Clot = Clot.updateMask(final_mask);
    Hhot = Hhot.updateMask(final_mask);
    Hlot = Hlot.updateMask(final_mask);
          
    // Training polygons
    var t_poly_c = ee.FeatureCollection(class_ref_cont);
    var t_poly_h = ee.FeatureCollection(class_ref_hist);
    // Isolate the bands to use in the classification
    var bands = ee.List(indx);
    
    print('Console will populate with accuracy metrics. The Tasks tab'+
          '\nwill turn yellow when the classifications are complete and'+
          '\nready to export to the asset folder. The classification(s)'+
          '\nwill be automatically added to the map viewer to explore.');
    
    // Classification using RF
    var expanded_colors = ee.Dictionary(t_poly_c.distinct(label).sort(label).aggregate_array(label).iterate(function(next, carry){
      carry = ee.Dictionary(carry);
      var pos = ee.Number(carry.get('position'));
      var color = ee.List(carry.get('colors')).get(pos);
      var prev = ee.Number(carry.get('prev'));
      var out = ee.List(carry.get('output'));
      var diff = ee.Number(ee.Algorithms.If(pos.gt(0), ee.Number(next).subtract(prev), ee.Number(1)));
      out = out.cat(ee.List.repeat(color, diff));
      carry = carry.set('prev', ee.Number(next));
      carry = carry.set('output', out);
      carry = carry.set('position', pos.add(1));
      return carry;
    }, ee.Dictionary({position: ee.Number(0), prev: ee.Number(-1), colors: colors, output: ee.List([])}))).get('output');
    
    // Contemporary
    if (HOT_cont_out === true) { RFclass.ChotClassify(Chot, 
                                    t_poly_c, label, bands, ROI, trees, 
                                    splits, leafpop, bag, nodes, seeds, expanded_colors);}
    if (LOT_cont_out === true) { RFclass.ClotClassify(Clot, 
                                    t_poly_c, label, bands, ROI, trees, 
                                    splits, leafpop, bag, nodes, seeds, expanded_colors);}
    if (combo_cont_out === true) { RFclass.CcomClassify(Chot, 
                                    Clot, t_poly_c, label, bands, ROI, trees, 
                                    splits, leafpop, bag, nodes, seeds, expanded_colors);}
                                 
    // Historical
    if (HOT_hist_out === true) { RFclass.HhotClassify(Hhot, 
                                  class_ref_type, use_cont_spec, Chot, t_poly_h, 
                                  t_poly_c, label, bands, ROI, trees, 
                                  splits, leafpop, bag, nodes, seeds, expanded_colors);}
    if (LOT_hist_out === true) { RFclass.HlotClassify(Hlot, 
                                  class_ref_type, use_cont_spec, Clot, t_poly_h, 
                                  t_poly_c, label, bands, ROI, trees, 
                                  splits, leafpop, bag, nodes, seeds, expanded_colors);}
    if (combo_hist_out === true) { RFclass.HcomClassify(Hhot,
                                  Hlot, class_ref_type, use_cont_spec, Chot, Clot,
                                  t_poly_h, t_poly_c, label, bands, ROI, trees, 
                                  splits, leafpop, bag, nodes, seeds, expanded_colors);}

   });
  print(step_2a_button);
});
print(step_2_button);

/*
At the end of the workflow, the user should have started exporting:
    1.) 1 - 6 land cover maps
        a.) High tide comtemporary land cover map
        b.) Low tide comtemporary land cover map
        c.) Combination comtemporary land cover map
        d.) High tide historical land cover map
        e.) Low tide historical land cover map
        f.) Combination historical land cover map
    * - Additionally, they may have saved the output classification
        accuracy metrics or any of the graphs/tables from Section 2
*/
////////////////////////////////////////////////////////////////////////////////  
